#!/usr/bin/env bash

set -eu
shopt -s nullglob

prgname=${0##*/}

_usage() {
    echo "usage: $prgname [-p profile] [arg]..."
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

bin='firefox'
bin_name=$bin
profile=

case $prgname in
    ff)
        profile='default'
        ;;
    ffdev)
        bin='firefox-developer'
        bin_name='firefox-dev'
        ;;
esac

while getopts 'p:h' opt; do
    case $opt in
        p)
            profile=$OPTARG
            ;;
        h)
            usage
            ;;
        *)
            usage_err
            ;;
    esac
done
shift $((OPTIND-1))

# ----------------------------------------

if [[ ! $profile ]]; then
    filter=
    if [[ $bin_name = 'firefox' ]]; then
        profiles=(
            devel
            lab
            plain
        )
    fi
    for p in ~/.config/"$bin_name".*; do
        profiles+=("${p#*"$bin_name".}")
    done
    profile=$(
        (set +u; IFS=$'\n'; printf '%s' "${profiles[*]}") |
        sort -u | grep -P "$filter" |
        dmenu1 "$prgname"
    )
fi

[[ ! $profile ]] && exit 1

# Workaround to ensure separate instance per profile.
export LOGNAME="$USER.$bin_name.$profile"

path="$HOME/.config/$bin_name"
[[ $bin_name = 'firefox' && $profile = 'default' ]] || path+=".$profile"

mkdir -p "$path"
cd "$path"

if [[ ! -e user.js ]]; then
    cat >user.js <<-EOF
		//user_pref('browser.tabs.remote.force-enable', true);
		//user_pref('layers.acceleration.force-enabled', true);

		user_pref('browser.newtabpage.directory.ping', '');
		user_pref('browser.newtabpage.directory.source', '');
		user_pref('browser.newtabpage.enabled', false);
		user_pref('browser.newtabpage.enhanced', false);
		user_pref('browser.startup.homepage_override.mstone', 'ignore');
		user_pref('browser.startup.page', 0);
		user_pref('browser.tabs.closeWindowWithLastTab', false);
		user_pref('browser.tabs.remote.autostart', true);
		user_pref('datareporting.policy.dataSubmissionEnabled', false);
		user_pref('media.peerconnection.enabled', false);
		user_pref('network.http.pipelining', true);
		user_pref('network.http.proxy.pipelining', true);
		user_pref('network.http.referer.XOriginPolicy', 1);
		user_pref('network.http.referer.spoofSource', true);
		user_pref('network.http.referer.trimmingPolicy', 2 );
		user_pref('network.http.sendRefererHeader', 1);
		user_pref('privacy.donottrackheader.enabled', true);
		user_pref('security.ssl3.dhe_rsa_aes_128_sha', false);
		user_pref('security.ssl3.dhe_rsa_aes_256_sha', false);
	EOF

    [[ $profile = 'default' ]] && cat >>user.js <<-EOF

		user_pref('browser.cache.offline.enable', false);
		user_pref('browser.safebrowsing.enabled', false);
		user_pref('browser.safebrowsing.malware.enabled', false);
		user_pref('dom.battery.enabled', false);
		user_pref('dom.event.clipboardevents.enabled', false);
		user_pref('geo.enabled', false);
		user_pref('network.cookie.cookieBehavior', 1);
		user_pref('network.cookie.lifetimePolicy', 2);
		user_pref('privacy.trackingprotection.enabled', true);
		user_pref('webgl.disabled', true);
	EOF
fi

mkdir -p chrome
cd chrome

case $profile in
    devel)  frame_color='#0099FF' ;;
    lab)    frame_color='#FF2200' ;;
    plain)  frame_color='#26BF30' ;;
    *)      frame_color='#FF9900' ;;
esac

if [[ ! -e userChrome.css ]]; then
    cat >userChrome.css <<-EOF
		#urlbar {
		    -moz-box-direction: reverse;
		}

		.urlbar-textbox-container {
		    padding-right: 3px !important;
		}

		#identity-box {
		    padding-inline-start: 5px !important;
		}

		#notification-popup-box:not([hidden]) + #identity-box {
		    padding-inline-start: 12px !important;
		}

		#notification-popup-box {
		    padding-left: 3px !important;
		}

		#urlbar > .chromeclass-toolbar-additional {
		    border-inline-end: 1px solid var(--urlbar-separator-color) !important;
		    border-inline-start: none !important;
		    margin: 0 !important;
		    padding: 0 4px 1px 5px !important;
		}

		#urlbar-wrapper > #forward-button[disabled] + #urlbar > .chromeclass-toolbar-additional {
		    padding-inline-start: calc(var(--backbutton-urlbar-overlap) + 5px) !important;
		}
	EOF

    [[ $profile != 'default' ]] && cat >>userChrome.css <<-EOF

		#TabsToolbar::before {
		    content: "$profile";
		    background: $frame_color;
		    color: white;
		    display: -moz-box;
		    font-family: monospace;
		    font-weight: bold;
		    padding: 7px 5px 0;
		}
	EOF
fi

[[ ! -e userContent.css ]] && touch userContent.css

exec "$bin" --class "Firefox ($profile)" --profile "$path" "$@"
