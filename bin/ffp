#!/usr/bin/env bash

set -eu -o pipefail
shopt -s extglob

prgname=${0##*/}

_usage() {
    echo "usage: $prgname [-p profile] [arg]..."
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

bin=firefox
bin_name=$bin
profile=

case $prgname in
    ff)
        profile=default
        ;;
    ffdev)
        bin=firefox-developer-edition
        bin_name=firefox-dev
        ;;
esac

while getopts p:h opt; do
    case $opt in
        p) profile=$OPTARG ;;
        h) usage ;;
        *) usage_err ;;
    esac
done
shift $((OPTIND-1))

# ----------------------------------------

if [[ ! $profile ]]; then
    filter=
    profiles=(
        default
        dev
        lab
        plain
    )
    for p in ~/.config/"$bin_name".*; do
        [[ -d $p ]] || continue
        profiles+=("${p#*$bin_name.}")
    done
    profile=$(
        printf '%s\n' "${profiles[@]}" |
            sort -u | grep -P "$filter" |
            dmenu1 -p "$prgname"
    )
fi

[[ $profile ]] || exit 1

# Workaround to ensure separate instance per profile.
export LOGNAME=$USER.$bin_name.$profile

path=~/.config/$bin_name
[[ $profile = default ]] || path+=.$profile

mkdir -p "$path"
cd "$path"

if [[ ! -f user.js ]]; then
    if [[ ! $profile =~ ^plain(-|$) ]]; then
        cat >>user.js <<-'EOF'
			//user_pref('security.ssl.require_safe_negotiation', true);

			user_pref('accessibility.blockautorefresh', true);
			user_pref('browser.ctrlTab.previews', true);
			user_pref('browser.fixup.alternate.enabled', false);
			user_pref('browser.newtabpage.directory.ping', '');
			user_pref('browser.newtabpage.directory.source', '');
			user_pref('browser.newtabpage.enabled', false);
			user_pref('browser.newtabpage.enhanced', false);
			user_pref('browser.search.geoSpecificDefaults', false);
			user_pref('browser.shell.checkDefaultBrowser', false);
			user_pref('browser.startup.homepage', 'about:blank');
			user_pref('browser.startup.homepage_override.mstone', 'ignore');
			user_pref('browser.startup.page', 3);
			user_pref('browser.tabs.animate', false);
			user_pref('browser.tabs.closeWindowWithLastTab', false);
			user_pref('browser.tabs.warnOnClose', false);
			user_pref('browser.tabs.warnOnCloseOtherTabs', false);
			user_pref('browser.tabs.warnOnOpen', false);
			user_pref('browser.urlbar.suggest.searches', true);
			user_pref('datareporting.policy.dataSubmissionEnabled', false);
			user_pref('devtools.chrome.enabled', true);
			user_pref('devtools.command-button-measure.enabled', true);
			user_pref('devtools.command-button-paintflashing.enabled', true);
			user_pref('devtools.command-button-rulers.enabled', true);
			user_pref('devtools.debugger.remote-enabled', true);
			user_pref('devtools.dom.enabled', true);
			user_pref('devtools.editor.keymap', 'vim');
			user_pref('devtools.editor.tabsize', 4);
			user_pref('devtools.inspector.showUserAgentStyles', true);
			user_pref('devtools.scratchpad.enabled', true);
			user_pref('devtools.webconsole.persistlog', true);
			user_pref('devtools.webconsole.timestampMessages', true);
			user_pref('plugin.defaultXpi.state', 1);
			user_pref('plugin.state.flash', 1);
			user_pref('plugin.state.java', 1);
			user_pref('privacy.cpd.offlineApps', true);
			user_pref('privacy.cpd.openWindows', true);
			user_pref('privacy.cpd.siteSettings', true);
			user_pref('reader.parse-on-load.enabled', false);
			user_pref('security.ssl3.dhe_rsa_aes_128_sha', false);
			user_pref('security.ssl3.dhe_rsa_aes_256_sha', false);
			user_pref('toolkit.telemetry.archive.enabled', false);
			user_pref('toolkit.telemetry.enabled', false);
			user_pref('toolkit.telemetry.unified', false);
		EOF

        [[ ! $profile =~ ^(dev|lab)(-|$) ]] && cat >>user.js <<-'EOF'

			user_pref('media.peerconnection.enabled', false);
			user_pref('media.peerconnection.ice.default_address_only', true);
			user_pref('network.http.pipelining', true);
			user_pref('network.http.proxy.pipelining', true);
			user_pref('network.http.referer.XOriginPolicy', 1);
			user_pref('network.http.referer.spoofSource', true);
			user_pref('privacy.donottrackheader.enabled', true);
			user_pref('privacy.trackingprotection.enabled', true);
		EOF

        [[ $profile = default ]] && cat >>user.js <<-'EOF'

			//user_pref('network.cookie.cookieBehavior', 3);
			//user_pref('network.cookie.lifetimePolicy', 1);
			//user_pref('signon. rememberSignons', false);
			//user_pref('webgl.disabled', true);

			user_pref('beacon.enabled', false);
			user_pref('browser.safebrowsing.enabled', false);
			user_pref('browser.safebrowsing.malware.enabled', false);
			user_pref('dom.battery.enabled', false);
			user_pref('dom.event.clipboardevents.enabled', false);
			user_pref('geo.enabled', false);
			user_pref('media.av1.enabled', true);
		EOF
    fi
fi

mkdir -p chrome
cd chrome

case $profile in
    dev?(-*))   frame_color='#0099ff' ;;
    lab?(-*))   frame_color='#ff2200' ;;
    plain?(-*)) frame_color='#26bf30' ;;
    *)          frame_color='#ff9900' ;;
esac

if [[ ! -f userChrome.css ]]; then
    [[ $profile != default ]] && cat >>userChrome.css <<-EOF

		#TabsToolbar::before {
		    content: "$profile";
		    background: $frame_color;
		    color: white;
		    display: -moz-box;
		    font-family: monospace;
		    font-weight: bold;
		    padding: 7px 5px 0;
		}
	EOF
fi

exec "$bin" --class "Firefox ($profile)" --profile "$path" "$@"
