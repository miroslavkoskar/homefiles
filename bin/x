#!/usr/bin/env bash
#
# X session startup script.
#
# * display number will be the same as currently active VT number
# * continue only if display number is not used already
# * client: ~/bin/xsession "$@"
# * server: /usr/lib/Xorg
#
# If started as 'xx':
#
# * display number will be the first free starting with 91
# * client: ~/bin/xsession "$@"
# * server: /usr/bin/Xephyr

set -eu

prgname=${0##*/}

if (( EUID == 0 )); then
    echo 'This script must NOT be run as root.' >&2
    exit 1
fi

# ----------------------------------------

datadir="$HOME/.local/share/xorg"
mkdir -p "$datadir"

xauthset() {
    local dispno=$1
    local cookie; cookie=$(mcookie)
    xauth -q add ":$dispno" . "$cookie" &>/dev/null
}


# /usr/bin/Xephyr
# ----------------------------------------

if [[ $prgname = 'xx' ]]; then
    for (( dispno=91; 1; dispno++ )); do
        [[ -e /tmp/.X$dispno-lock ]] || break
    done

    xauthset "$dispno"

    unset XSESSION
    xinit ~/bin/xsession "$@" -- \
        /usr/bin/Xephyr ":$dispno" \
        -dpi 96 \
        -resizeable \
        &>"$datadir/xsession.$dispno.out" &
    exit
fi


# /usr/lib/Xorg
# ----------------------------------------

vt=$(</sys/class/tty/tty0/active)
vtno=${vt##tty}
dispno=$vtno
lockfile="/tmp/.X$dispno-lock"

if [[ -e $lockfile ]]; then
    read -ra pid <"$lockfile"
    printf '\nDisplay %s is currently in use (pid=%s).\n\n' "$dispno" "$pid"
    if ps --pid "$pid"; then
        echo
        exit 1
    else
        echo
        rm -f "$lockfile"
    fi
fi

xauthset "$dispno"

#exec xinit ~/bin/xsession "$@" -- \
#    /usr/lib/Xorg ":$dispno" "vt$vtno" \
#    -config "${XCONFIG:-xorg.conf.$HOSTNAME}" \
#    -keeptty \
#    -noreset \
#    -novtswitch \
#    </dev/null &>"$datadir/xsession.$dispno.out"

exec &>"$datadir/xsession.$dispno.out"
stty=$(stty -g)

cleanup() {
    set +e
    if [[ $pid ]] && ps --pid "$pid" &>/dev/null; then
        kill "$pid"
        trap : HUP
        (sleep 15; kill -s HUP $$) &
        wait "$pid"
        kill -s KILL "$pid" &>/dev/null
    fi
    stty "$stty" || stty sane
    # shellcheck disable=SC2046
    kill $(jobs -p) &>/dev/null
}
trap cleanup EXIT

trap 'ready=1' USR1
(
    trap '' USR1
    exec /usr/lib/Xorg ":$dispno" "vt$vtno" \
        -config "${XCONFIG:-xorg.conf.$HOSTNAME}" \
        -keeptty \
        -noreset \
        -novtswitch
) &
pid=$!
trap : HUP
(sleep 15; kill -s HUP $$) &
wait "$pid" || true

[[ ${ready-} ]] || exit 1
DISPLAY=":$dispno" setsid xsession "$@" </dev/null
