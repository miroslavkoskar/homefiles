#!/usr/bin/env python
# -*- coding: utf-8 -*-

from functools import partial
from signal import signal, SIGHUP, SIGINT, SIGTERM, SIGWINCH, SIG_DFL, SIG_IGN
from time import sleep, time
import subprocess
import sys

SIGHUP_INT_TERM = (SIGHUP, SIGINT, SIGTERM)
sigwinch_entry_ts = 0
sigwinch_reentry_ts = 0


def usage_err():
    print('usage: onsigwinch-exec handler [arg]... -- child [arg]...', file=sys.stderr)
    sys.exit(2)


def signals(signals, handler):
    for sig in signals:
        signal(sig, handler)


def sigterm(child, signum, frame):
    child.terminate()


def sigwinch(handler_args, signum, frame):
    global sigwinch_entry_ts
    global sigwinch_reentry_ts

    if sigwinch_entry_ts:
        sigwinch_reentry_ts = time()
        return

    try:
        while True:
            sigwinch_entry_ts = time()

            handler = subprocess.Popen(
                handler_args,
                preexec_fn=partial(signals, SIGHUP_INT_TERM, SIG_DFL)
            )
            handler.wait()

            while time() - sigwinch_entry_ts < 0.5:
                sleep(0.1)

            if sigwinch_entry_ts > sigwinch_reentry_ts:
                break
    finally:
        sigwinch_entry_ts = 0


signals(SIGHUP_INT_TERM, SIG_IGN)

args = sys.argv[1:]

try:
    sep_idx = args.index('--')
except ValueError:
    usage_err()

handler_args = args[:sep_idx]
child_args = args[sep_idx+1:]

if not handler_args or not child_args:
    usage_err()

child = subprocess.Popen(
    child_args,
    preexec_fn=partial(signals, SIGHUP_INT_TERM, SIG_DFL)
)

signals((SIGHUP, SIGTERM), partial(sigterm, child))
signal(SIGWINCH, partial(sigwinch, handler_args))

child.wait()
sys.exit(child.returncode)
