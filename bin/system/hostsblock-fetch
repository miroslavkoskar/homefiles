#!/usr/bin/env bash

set -eu -o pipefail

tmpdir=$(mktemp -d)
cleanup() { rm -rf "$tmpdir"; }
trap cleanup EXIT

export TMPDIR=$tmpdir
cd "$tmpdir"

export SHELL=$BASH
if (( EUID )); then
    export CONFDIR="$HOME/.config/hostsblock"
    export CACHEDIR="$HOME/.cache/hostsblock"
else
    export CONFDIR='/etc/hostsblock'
    export CACHEDIR='/var/cache/hostsblock'
    export HOME=$TMPDIR
fi
mkdir -p "$CACHEDIR"

pargs=()
[[ -t 1 ]] && pargs+=(--bar) || pargs+=(--silent)

fetch() {
    set -eu -o pipefail
    local url=$1 oname stat
    [[ $url ]] || return
    oname=$(printf '%s' "$url" | sha1sum)
    read -ra oname <<<"$oname"
    stat=$(
        curl -sSL -C - -z "$CACHEDIR/$oname" -w '%{http_code}' \
            -A 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36' \
            -o "$oname" "$url"
    )
    case $stat in
        200)
            mv "$oname" "$CACHEDIR/$oname"
            ;;
        304)
            ;;
        *)
            exec >&2
            echo "HTTP $stat : $url"
            cat "$oname"
            echo
            exit 1
            ;;
    esac
    echo "$CACHEDIR/$oname"
}
export -f fetch

parallel "${pargs[@]}" -r -j10 fetch <"$CONFDIR/sources" >queue

{
    sort queue
    printf '%s\n' "$CONFDIR/whitelist"
} | xargs -rx sha1sum >sum
if cmp -s sum "$CACHEDIR/sum"; then
    exit
fi

process() {
    set -eu
    local src=$1
    local oname=${src##*/} mime target
    mime=$(file -b --mime-type -- "$src")
    case $mime in
        text/plain)
            target=$1
            ;;
        application/x-7z-compressed)
            target="$oname.extracted"
            7z x -o"$target" -- "$src" >/dev/null
            ;;
        application/zip)
            target="$oname.extracted"
            unzip -qq -d "$target" -- "$src"
            ;;
    esac
    if [[ -d $target ]]; then
        find "$target" \
            \( \
                -iname hosts -o \
                -iregex '.*/add\.[^./]*' -o \
                -iregex '.*/hosts\.[^./]*' -o \
                -name 'Yahoo_*' -o \
                -name main \
            \) -exec cat {} +
    else
        cat "$target"
    fi
}
export -f process

nproc=$(nproc)
parallel "${pargs[@]}" process <queue | dos2unix | split -d -n "r/$nproc" - chunk
find . -name 'chunk*' -printf '%P\n' >chunks

post_process() {
    set -eu -o pipefail
    awk '
    /^#/ || /^\s*$/ { next }
    {
        if (NF > 1) target = $2
        else target = $1
        print target
    }' <"$1" |
    (
        declare -i retstat=0
        grep -E -v \
            -e '[^[:alnum:]._-]' \
            -e '^[^[:alnum:]]' -e '[^[:alnum:]]$' \
            -f "$CONFDIR/whitelist" || retstat=$?
        (( retstat < 2 )) || exit 2
    ) | awk '{ print "0.0.0.0 " $0 }' >"$1.done"
}
export -f post_process

nice parallel "${pargs[@]}" post_process <chunks

xargs -r -I{} cat {}.done <chunks | sort -u >"$CACHEDIR/hosts"
mv sum "$CACHEDIR/sum"
