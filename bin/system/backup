#!/usr/bin/env bash

set -eu

if (( EUID )); then
    echo 'This script must be run with root privileges.' >&2
    exit 1
fi

prgname=${0##*/}

part=$(realpath '/dev/disk/by-uuid/a10fd9bc-f55c-4d83-8bb7-a0345da60247')
disk=${part%%[0-9]}
fs='/dev/disk/by-uuid/95908df8-35c5-4f39-a57b-ca0a091b4eda'
target='/mnt/backups'
mapper='/dev/mapper/backups'

# backup-setup

if [[ $prgname = 'backup-setup' ]]; then
    if [[ ! -e $part ]]; then
        echo 'target partition missing' >&2
        exit 1
    fi

    if [[ ! -e $fs ]]; then
        cryptsetup luksOpen "$part" backups
    fi

    if [[ $(realpath -- "$mapper") != "$(realpath -- "$fs")" ]]; then
        echo "$mapper: mapper misconfigured" >&2
        exit 1
    fi

    mkdir -p "$target"

    if ! mounted "$target" "$mapper" >/dev/null; then
        mount "$fs" "$target"
    fi
    exit
fi

# backup

log_prefix=$$
log() { printf "$log_prefix: $*\n"; } >&2

cleanup() { log "exiting ($?)"; }
trap cleanup EXIT

loghome='/var/log/local'
mkdir -p "$loghome"

exec 8>>"$loghome/backup.log"
if [[ -t 2 ]]; then
    exec > >(tee -a /dev/fd/8 >&2) 2>&1
else
    exec >&8 2>&1
fi

log "-- $(date -R)"

if [[ ! -e $part ]]; then
    log "$target: target partition missing"
    exit 2
fi

if [[ ! -d $target || ! -w $target ]]; then
    log "$target: not a directory or not a writable one"
    exit 11
fi

if [[ $(realpath -- "$mapper") != "$(realpath -- "$fs")" ]]; then
    log "$mapper: mapper misconfigured"
    exit 12
fi

if ! mounted "$target" "$mapper" >/dev/null; then
    log "$target: mountpoint misconfigured"
    exit 12
fi

exec 8>/var/run/backup.lock
if ! flock -n 8; then
    log "$target: full-backup in progress"
    exit 3
fi
(exec 8<&-

t_begin=$(date +%s)

mkdir -p "$target/full-backup"
rsync -aAHSX / "$target/full-backup/master" \
      --delete \
      --backup --backup-dir=../$(date +%F.%s) \
      --exclude-from=- <<-EOF
	*/lost+found
	/dev/*
	/home/*/.cache/*
	/home/*/.thumbnails/*
	/home/docker.img
	/home/docker/*
	/media/*
	/mnt/*
	/proc/*
	/run/*
	/sys/*
	/tmp/*
	/var/abs/*
	/var/cache/pacman/*
	/var/cache/pkgfile/*
	/var/lib/docker/*
	/var/lib/pacman/sync/*
EOF

t_end=$(date +%s)
log "total time: $(((t_end-t_begin)/60)) minutes, $(((t_end-t_begin)%60)) seconds"

echo 'setting standby' >&2
hdparm -S 12 "$disk" &>/dev/null

)
