#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    tcolors-gtk
    ~~~~~~~~~~~

    Set Terminal ANSI Colors.

    :Compatibility: Python 2.7 / 3.2
    :Copyright: Copyright 2013 by Miroslav Koskar
    :License: BSD
"""

from sys import stdout
import argparse
import signal

from gi.repository import Gdk
from gi.repository import Gtk
import tcolors

signal.signal(signal.SIGINT, signal.SIG_DFL)


def color_to_hex(color):
    rgb = (color.red, color.green, color.blue)
    rgb = tuple(map(lambda x: int(x * 255), rgb))
    return '#{:02X}{:02X}{:02X}'.format(*rgb)


class MainWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='Set Terminal ANSI Colors', resizable=False)

        grid = Gtk.Grid()

        self.pbuttons = []
        for n in range(16):
            btn = Gtk.ColorButton()
            btn.set_size_request(80, 80)
            btn.connect('color-set', self.on_colorp_set, n)
            self.pbuttons.append(btn)
            lbl = Gtk.Label()
            lbl.set_text('color{}'.format(n))
            grid.attach(btn, n % 8, 2 * (n // 8), 1, 1)
            grid.attach(lbl, n % 8, 1 + 2 * (n // 8), 1, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_colorfg_set)
        self.fgbutton = btn
        lbl = Gtk.Label()
        lbl.set_text('fg')
        grid.attach(btn, 0, 5, 3, 1)
        grid.attach(lbl, 0, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_colorbg_set)
        self.bgbutton = btn
        lbl = Gtk.Label()
        lbl.set_text('bg')
        grid.attach(btn, 3, 5, 3, 1)
        grid.attach(lbl, 3, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_colorcur_set)
        self.curbutton = btn
        lbl = Gtk.Label()
        lbl.set_text('cur')
        grid.attach(btn, 6, 5, 2, 1)
        grid.attach(lbl, 6, 6, 2, 1)

        self.add(grid)

    def on_colorp_set(self, widget, n):
        color = widget.get_rgba()
        tcolors.set_colorp(n, color_to_hex(color), flush=True)

    def on_colorfg_set(self, widget):
        color = widget.get_rgba()
        tcolors.set_colorfg(color_to_hex(color), flush=True)

    def on_colorbg_set(self, widget):
        color = widget.get_rgba()
        tcolors.set_colorbg(color_to_hex(color), flush=True)

    def on_colorcur_set(self, widget):
        color = widget.get_rgba()
        tcolors.set_colorcur(color_to_hex(color), flush=True)

    def init_xcolors(self, file, prefix):
        xcolors = tcolors.set_from_xcolors(file, prefix)
        stdout.flush()
        for c in xcolors:
            name, value, p, fg, bg, cur = c
            gdk_color = Gdk.Color.parse(value)
            if not gdk_color[0]:
                continue
            value = gdk_color[1]
            if fg:
                self.fgbutton.set_color(value)
            elif bg:
                self.bgbutton.set_color(value)
            elif cur:
                self.curbutton.set_color(value)
            else:
                self.pbuttons[int(p)].set_color(value)

    def init_tcolors(self):
        # TODO
        print('init_tcolors: not implemented yet')


parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    description='Set Terminal ANSI Colors.'
)
parser.add_argument('--prefix', default='*',
                    help='xcolors: consider only colors with PREFIX')
parser.add_argument('file', nargs='?', help='xcolors: pass - to read from stdin')
args = parser.parse_args()

main = MainWindow()
if (args.file):
    main.init_xcolors(args.file, args.prefix)
else:
    main.init_tcolors()

main.connect('delete-event', Gtk.main_quit)
main.show_all()
Gtk.main()
