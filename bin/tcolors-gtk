#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    tcolors-gtk
    ~~~~~~~~~~~

    Set Terminal ANSI Colors.

    :Compatibility: Python 2.7 / 3.2
    :Copyright: Copyright 2013 by Miroslav Koskar
    :License: BSD
"""

from sys import stdout
import argparse
import signal
import textwrap

from gi.repository import Gdk
from gi.repository import Gtk
import tcolors

signal.signal(signal.SIGINT, signal.SIG_DFL)


def color_to_hex(color):
    rgb = (color.red, color.green, color.blue)
    rgb = tuple(map(lambda x: int(x * 255), rgb))
    return '#{:02X}{:02X}{:02X}'.format(*rgb)


class MainWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='Set Terminal ANSI Colors', resizable=False)

        grid = Gtk.Grid()

        self.pbuttons = []
        for n in range(16):
            btn = Gtk.ColorButton()
            btn.set_size_request(80, 80)
            btn.connect('color-set', self.on_color_set)
            btn.setfn = lambda c, n = n: tcolors.set_colorp(n, c, flush=True)
            self.pbuttons.append(btn)

            btn_reset = Gtk.Button('color{}'.format(n), sensitive=False)
            btn_reset.connect('clicked', self.on_color_reset, btn)
            btn.btn_reset = btn_reset

            grid.attach(btn, n % 8, 2 * (n // 8), 1, 1)
            grid.attach(btn_reset, n % 8, 1 + 2 * (n // 8), 1, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorfg(c, flush=True)
        self.fgbutton = btn

        btn_reset = Gtk.Button('fg', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 0, 5, 3, 1)
        grid.attach(btn_reset, 0, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorbg(c, flush=True)
        self.bgbutton = btn

        btn_reset = Gtk.Button('bg', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 3, 5, 3, 1)
        grid.attach(btn_reset, 3, 6, 3, 1)

        btn = Gtk.ColorButton()
        btn.set_size_request(0, 50)
        btn.connect('color-set', self.on_color_set)
        btn.setfn = lambda c: tcolors.set_colorcur(c, flush=True)
        self.curbutton = btn

        btn_reset = Gtk.Button('cur', sensitive=False)
        btn_reset.connect('clicked', self.on_color_reset, btn)
        btn.btn_reset = btn_reset

        grid.attach(btn, 6, 5, 2, 1)
        grid.attach(btn_reset, 6, 6, 2, 1)

        self.add(grid)

    def on_color_set(self, cbtn):
        color = cbtn.get_rgba()
        if hasattr(cbtn, 'saved_color'):
            style = cbtn.btn_reset.get_style_context()
            if not color.equal(cbtn.saved_color):
                style.add_class('changed')
            else:
                style.remove_class('changed')
        cbtn.setfn(color_to_hex(cbtn.get_rgba()))

    def on_color_reset(self, w, cbtn):
        cbtn.set_rgba(cbtn.saved_color)
        self.on_color_set(cbtn)

    def save_color(self, cbtn):
        cbtn.saved_color = cbtn.get_rgba()
        cbtn.btn_reset.set_sensitive(True)

    def save_colors(self):
        for cbtn in self.pbuttons:
            self.save_color(cbtn)
        self.save_color(self.fgbutton)
        self.save_color(self.bgbutton)
        self.save_color(self.curbutton)

    def init_xcolors(self, file, prefix):
        xcolors = tcolors.set_from_xcolors(file, prefix)
        stdout.flush()
        for c in xcolors:
            name, value, p, fg, bg, cur = c
            gdk_color = Gdk.Color.parse(value)
            if not gdk_color[0]:
                continue
            value = gdk_color[1]
            if fg:
                self.fgbutton.set_color(value)
            elif bg:
                self.bgbutton.set_color(value)
            elif cur:
                self.curbutton.set_color(value)
            else:
                self.pbuttons[int(p)].set_color(value)

    def init_tcolors(self):
        # TODO
        pass


parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent("""
        Set terminal ANSI colors.
        Colors are initialized from terminal itself (if supported).
        If <file> is passed, matching X resources are used instead.
        """
    )
)
parser.add_argument('--prefix', default='*',
        help='consider only X resources with PREFIX (default: *)')
parser.add_argument('file', nargs='?',
                    help="'-' for stdin; initialize from X resources")
args = parser.parse_args()

main = MainWindow()

if (args.file):
    main.init_xcolors(args.file, args.prefix)
    main.save_colors()
else:
    main.init_tcolors()

screen = Gdk.Screen.get_default()
css_provider = Gtk.CssProvider()
css_provider.load_from_data(
    'GtkButton.changed { background-color: #ccc; font-weight: bold; }'.encode()
)
style = Gtk.StyleContext()
style.add_provider_for_screen(screen, css_provider,
                              Gtk.STYLE_PROVIDER_PRIORITY_USER)

main.connect('delete-event', Gtk.main_quit)
main.show_all()
Gtk.main()
