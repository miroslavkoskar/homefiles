# vim: ft=muttrc

# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.

# decode application/pgp
set pgp_decode_command = 'gpg --no-verbose --quiet --batch --status-fd=2 %?p?--passphrase-fd 0? --output - %f'

# decrypt a pgp/mime attachment
set pgp_decrypt_command = 'gpg --no-verbose --quiet --batch --status-fd=2 %?p?--passphrase-fd 0? --output - %f'

# verify a pgp/mime signature
set pgp_verify_command = 'gpg --no-verbose --quiet --batch --status-fd=2 --verify --output - %s %f'

# create a pgp/mime signed attachment
set pgp_sign_command = 'gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --detach-sign %?a?-u %a? --output - %f'

# create a application/pgp signed (old-style) message
set pgp_clearsign_command = 'gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? --output - %f'

# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command = 'pgpewrap gpg --no-verbose --quiet --batch --armor --textmode --always-trust --encrypt --output - -- -r %r -- %f'

# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command = 'pgpewrap gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --always-trust --encrypt --sign %?a?-u %a? --output - -- -r %r -- %f'

# import a key into the public key ring
set pgp_import_command = 'gpg --no-verbose --import %f'

# export a key from the public key ring
set pgp_export_command = 'gpg --no-verbose --armor --export %r'

# verify a key
set pgp_verify_key_command = 'gpg --verbose --batch --fingerprint --check-sigs %r'

# read in the public key ring
set pgp_list_pubring_command = 'gpg --no-verbose --quiet --batch --with-colons --list-keys %r'

# read in the secret key ring
set pgp_list_secring_command = 'gpg --no-verbose --quiet --batch --with-colons --list-secret-keys %r'

set crypt_autosign
set crypt_replysign
set crypt_replysignencrypted
set pgp_auto_decode
set pgp_good_sign = '^gpg: Good signature'
set pgp_sign_as = CDC91131
set pgp_use_gpg_agent

source ~/.mutt/generate_pgp_auto|
