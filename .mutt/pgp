# vim: ft=muttrc

# %p    Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
#       string otherwise. Note: This may be used with a %? construct.
#
# %f    Expands to the name of a file containing a message.
#
# %s    Expands to the name of a file containing the signature part of a
#       multipart/signed attachment when verifying it.
#
# %a    The value of $pgp_sign_as.
#
# %r    One or more key IDs.

# Decode application/pgp
set pgp_decode_command = 'gpg --no-verbose --quiet --batch --status-fd=2 %?p?--passphrase-fd 0? --trust-model always --no-auto-check-trustdb --verify-options show-primary-uid-only,no-show-policy-urls --output - %f'

# Decrypt a pgp/mime attachment
set pgp_decrypt_command = 'gpg --no-verbose --quiet --batch --status-fd=2 %?p?--passphrase-fd 0? --output - %f'

# Verify a pgp/mime signature
set pgp_verify_command = 'gpg --no-verbose --quiet --batch --status-fd=2 --trust-model always --no-auto-check-trustdb --verify-options show-primary-uid-only,no-show-policy-urls --verify --output - %s %f'

# Create a pgp/mime signed attachment
set pgp_sign_command = 'gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --detach-sign %?a?-u %a? --output - %f'

# Create a application/pgp signed (old-style) message
set pgp_clearsign_command = 'gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? --output - %f'

# Create a pgp/mime encrypted attachment
set pgp_encrypt_only_command = 'pgpewrap gpg --no-verbose --quiet --batch --armor --textmode --trust-model always --encrypt --output - -- -r %r -- %f'

# Create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command = 'pgpewrap gpg --no-verbose --quiet --batch %?p?--passphrase-fd 0? --armor --textmode --trust-model always --encrypt --sign %?a?-u %a? --output - -- -r %r -- %f'

# Import a key into the public key ring
set pgp_import_command = 'gpg --no-verbose --import %f'

# Export a key from the public key ring
set pgp_export_command = 'gpg --no-verbose --armor --export %r'

# Verify a key
set pgp_verify_key_command = 'gpg --verbose --batch --fingerprint --check-sigs %r'

# Read in the public key ring
set pgp_list_pubring_command = 'gpg --no-verbose --quiet --batch --with-colons --list-keys %r'

# Read in the secret key ring
set pgp_list_secring_command = 'gpg --no-verbose --quiet --batch --with-colons --list-secret-keys %r'

set crypt_autosign
set crypt_replysign
set crypt_replysignencrypted
set pgp_auto_decode
set pgp_good_sign = '^gpgv?: Good signature from '
set pgp_long_ids
set pgp_use_gpg_agent
unset pgp_show_unusable

source ~/.mutt/generate_pgp_auto|
