" vim: ft=vim fdm=marker

let vimrc = get(g:, 'vimrc', expand('<sfile>:p'))

call utils#PluginLoad('unimpaired')

source ~/.vim/vimrc_base

call utils#PluginAdd('bufexplorer')
call utils#PluginAdd('ctrlp')
call utils#PluginAdd('easy-align')
call utils#PluginAdd('exchange')
call utils#PluginAdd('filebeagle')
call utils#PluginAdd('nerdtree')

call utils#PluginAdd('fugitive')
call utils#PluginAdd('fzf')
call utils#PluginAdd('repeat')
call utils#PluginAdd('simpylfold')
call utils#PluginAdd('speeddating')
call utils#PluginAdd('surround')
call utils#PluginAdd('syntastic')
call utils#PluginAdd('tagbar')
call utils#PluginAdd('tcomment')
call utils#PluginAdd('undotree')

"call utils#PluginAdd('ctrlspace')
"call utils#PluginAdd('dirvish')
"call utils#PluginAdd('dispatch')
"call utils#PluginAdd('easymotion')
"call utils#PluginAdd('easytags')
"call utils#PluginAdd('emmet')
"call utils#PluginAdd('gitgutter')
"call utils#PluginAdd('gundo')
"call utils#PluginAdd('minibufexpl')
"call utils#PluginAdd('misc')
"call utils#PluginAdd('multiple-cursors')
"call utils#PluginAdd('neomake')
"call utils#PluginAdd('ultisnips')
"call utils#PluginAdd('unite')
"call utils#PluginAdd('visualrepeat')

call utils#PluginAdd('~/opt/fzf')

augroup vimrc_ext_lazy_plugins
    autocmd!
    "autocmd FileType python
    "    \ call utils#PluginLoad('ycm') | call youcompleteme#Enable()
augroup END


" bufexplorer
" ----------------------------------------

let bufExplorerFindActive = 0
let bufExplorerShowRelativePath = 1

nnoremap <silent> <Leader>bb :BufExplorer<CR>


" ctrlp
" ----------------------------------------

let ctrlp_arg_map = 1
let ctrlp_lazy_update = 0
let ctrlp_max_depth = 10
let ctrlp_max_files = 2500
let ctrlp_show_hidden = 1
let ctrlp_working_path_mode = 'rwa'

let ctrlp_prompt_mappings = {
    \ 'PrtCurLeft()': ['<c-h>', '<left>', '<c-^>'],
    \ 'PrtSelectMove("d")': ['<m-j>', '<PageDown>', '<kPageDown>'],
    \ 'PrtSelectMove("u")': ['<m-k>', '<PageUp>', '<kPageUp>'],
    \ }

nnoremap <silent> <M-e> :CtrlPMRUFiles<CR>


" dirvish
" ----------------------------------------

let dirvish_hijack_netrw = 0


" easy-align
" ----------------------------------------

vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


" easymotion
" ----------------------------------------

let EasyMotion_startofline = 0
let EasyMotion_verbose = 0

map <Leader><Leader>J <Plug>(easymotion-sol-j)
map <Leader><Leader>K <Plug>(easymotion-sol-k)


" easytags
" ----------------------------------------

let easytags_always_enabled = 1
let easytags_async = 1
let easytags_dynamic_files = 1
let easytags_file = '~/.cache/tags'
let easytags_resolve_links = 1
let easytags_suppress_report = 1


" filebeagle
" ----------------------------------------

let filebeagle_hijack_netrw = 0
let filebeagle_show_hidden = 1
let filebeagle_show_line_numbers = 0
let filebeagle_suppress_keymaps = 1

nmap <silent> - <Plug>FileBeagleOpenCurrentBufferDir
nmap <silent> <Leader>gg <Plug>FileBeagleOpenCurrentWorkingDir


" fugitive
" ----------------------------------------

nnoremap <Leader>G :G


" gundo
" ----------------------------------------

nnoremap <silent> <F4> :silent GundoToggle<CR>


" minibufexpl
" ----------------------------------------

let miniBufExplModSelTarget = 1
let miniBufExplUseSingleClick = 1
let miniBufExplorerMoreThanOne = 1000

noremap <silent> <Leader>B :MiniBufExplorer<CR>


" nerdtree
" ----------------------------------------

let NERDTreeAutoDeleteBuffer = 1
let NERDTreeBookmarksFile = $VIMDIR.'/.NERDTreeBookmarks'
let NERDTreeCaseSensitiveSort = 1
let NERDTreeHijackNetrw = 0
let NERDTreeIgnore = ['^\.svn$', '^\.git$', '\.swp$', '\~$']
let NERDTreeMapCWD = 'cD'
let NERDTreeMapHelp = '<F1>'
let NERDTreeShowBookmarks = 1
let NERDTreeShowHidden = 1
let NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path._strForUI():''}"
let NERDTreeWinSize = 36

noremap <silent> <F1> :NERDTreeFind<CR>
noremap <silent> <F2> :NERDTreeToggle<CR>
noremap <silent> <Leader>tf :NERDTreeFind<CR>
noremap <silent> <Leader>tt :NERDTreeToggle<CR>


" syntastic
" ----------------------------------------

set statusline+=%(\ %#ErrorMsg#%{SyntasticStatuslineFlag()}%*%)

let syntastic_aggregate_errors = 1
let syntastic_always_populate_loc_list = 1
let syntastic_auto_jump = 3
let syntastic_auto_loc_list = 0
let syntastic_check_on_open = 0
let syntastic_sort_aggregated_errors = 0
let syntastic_stl_format = ' %E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w} '

let syntastic_error_symbol = '>'
let syntastic_style_error_symbol = '>'
let syntastic_style_warning_symbol = '>'
let syntastic_warning_symbol = '>'

nnoremap <silent> <Leader>SS :SyntasticCheck<CR>
nnoremap <silent> <Leader>Si :SyntasticInfo<CR>
nnoremap <silent> <Leader>Sr :SyntasticReset<CR>

let g:syntastic_python_flake8_args='--ignore=E501,E128'
let g:syntastic_sh_shellcheck_args='--exclude=SC1090,SC1091,SC2032,SC2033,SC2088,SC2139,SC2148'


" tagbar
" ----------------------------------------

let tagbar_autofocus = 1
let tagbar_iconchars = ['▸', '▾']
let tagbar_map_help = ['<F1>']
let tagbar_map_jump = ['<CR>', 'o']
let tagbar_map_togglefold = ['O', 'za']
let tagbar_sort = 0

highlight TagbarHighlight cterm=reverse

noremap <silent> <F8> :Tagbar<CR>
noremap <silent> <Leader>T :TagbarOpenAutoClose<CR>


" tcomment
" ----------------------------------------

let tcommentMaps = 0
let tcommentOptions = {'whitespace': 'no'}

nnoremap <silent> <Leader>C :TCommentBlock<CR>
nnoremap <silent> <Leader>cc :TComment<CR>
vnoremap <silent> <Leader>C :TCommentBlock<CR>
vnoremap <silent> <Leader>cc :TComment<CR>


" unite
" ----------------------------------------

nnoremap <silent> <Leader>u :Unite<CR>


" ycm
" ----------------------------------------

let ycm_autoclose_preview_window_after_completion = 1


" ----------------------------------------

augroup vimrc_ext
    autocmd!

    autocmd BufWinEnter -MiniBufExplorer-
        \  call utils#BufSpecial()
        \| nnoremap <silent> <buffer> q :close<CR>

    autocmd BufWinEnter \[BufExplorer\]
        \  call utils#BufSpecial()
        \| normal! 4gg

    autocmd User FileBeagleReadPre
        \  unmap <buffer> <BS>
        \| nmap <buffer> <silent> u <Plug>(FileBeagleBufferFocusOnPrevious)

    autocmd FileType filebeagle call utils#BufSpecial()
    autocmd FileType nerdtree call utils#BufSpecial()
    autocmd FileType tagbar call utils#BufSpecial()
augroup END
