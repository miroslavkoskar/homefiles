" vim: ft=vim fdm=marker

let vimrc = get(g:, 'vimrc', expand('<sfile>:p'))

source ~/.vim/vimrc_base

"packadd! easymotion
packadd! bufexplorer
packadd! dirvish
packadd! easy-align
packadd! emmet
packadd! fugitive
packadd! fzf
packadd! fzf-ext
packadd! goyo
packadd! limelight
packadd! nerdtree
packadd! repeat
packadd! speeddating
packadd! surround
packadd! tagbar
packadd! tcomment
packadd! ultisnips
packadd! undotree
packadd! unimpaired
packadd! vim-snippets
packadd! visualrepeat

"packadd! neomake
packadd! ale

"packadd! deoplete
"packadd! deoplete-ternjs
"packadd! jspc.vim
"packadd! tern_for_vim

augroup vimrc_ext_lazy_plugins
    autocmd!

    "autocmd FileType python
    "    \ call packadd ycm | call youcompleteme#Enable()
augroup END


" ale
" ----------------------------------------

set statusline+=%(\ %#ErrorMsg#%(\ %{ale#statusline#Status()}\ %)%*%)

let ale_echo_cursor = 0
let ale_echo_msg_format = '%severity%: %s [%linter%]'
let ale_lint_on_enter = 0
let ale_lint_on_insert_leave = 1
let ale_lint_on_text_changed = 'normal'
let ale_sh_shellcheck_exclusions = 'SC1090'
let ale_sign_error = '>'
let ale_sign_warning = '>'
let ale_statusline_format = ['E(%d)', 'W(%d)', '']

nnoremap <silent> <C-Space> :ALEDetail<CR>
nnoremap <silent> <Leader>aa :ALEToggle<CR>


" bufexplorer
" ----------------------------------------

let bufExplorerFindActive = 0
let bufExplorerShowRelativePath = 1

nnoremap <silent> <Leader>bb :BufExplorer<CR>


" ctrlp
" ----------------------------------------

let ctrlp_arg_map = 1
let ctrlp_lazy_update = 0
let ctrlp_max_depth = 10
let ctrlp_max_files = 2500
let ctrlp_show_hidden = 1
let ctrlp_working_path_mode = 'rwa'

let ctrlp_prompt_mappings = {
    \ 'PrtCurLeft()': ['<c-h>', '<left>', '<c-^>'],
    \ 'PrtSelectMove("d")': ['<M-j>', '<PageDown>', '<kPageDown>'],
    \ 'PrtSelectMove("u")': ['<M-k>', '<PageUp>', '<kPageUp>'],
    \ }

nnoremap <silent> <M-e> :CtrlPMRUFiles<CR>


" deoplete
" ----------------------------------------

let deoplete#enable_at_startup = 1
let deoplete#enable_smart_case = 1

"inoremap <expr> <C-G> deoplete#undo_completion()
"inoremap <expr> <C-L> deoplete#refresh()
"inoremap <expr> <CR> deoplete#close_popup()."\<CR>"


" dirvish
" ----------------------------------------

let dirvish_hijack_netrw = 0
let dirvish_mode = ':sort | sort r /\m.*\ze[^\/]$/'


" easy-align
" ----------------------------------------

nmap <Leader>ga <Plug>(LiveEasyAlign)
xmap <Leader>ga <Plug>(LiveEasyAlign)


" easymotion
" ----------------------------------------

let EasyMotion_smartcase = 1
let EasyMotion_startofline = 0
let EasyMotion_verbose = 0

map <Leader><Leader>/ <Plug>(easymotion-sn)
map <Leader><Leader>J <Plug>(easymotion-sol-j)
map <Leader><Leader>K <Plug>(easymotion-sol-k)
map <Leader>; <Plug>(easymotion-next)
map <Leader>\ <Plug>(easymotion-prev)


" emmet
" ----------------------------------------

let user_emmet_leader_key = '<C-Y>'
let user_emmet_mode = 'i'


" filebeagle
" ----------------------------------------

let filebeagle_hijack_netrw = 0
let filebeagle_show_hidden = 1
let filebeagle_show_line_numbers = 0
let filebeagle_suppress_keymaps = 1

"nmap <silent> - <Plug>FileBeagleOpenCurrentBufferDir
"nmap <silent> <Leader>gg <Plug>FileBeagleOpenCurrentWorkingDir


" fugitive
" ----------------------------------------

nnoremap <Leader>G :G


" fzf
" ----------------------------------------

nnoremap <silent> <C-N> :Files<CR>


" limelight
" ----------------------------------------

let limelight_default_coefficient = 0.8


" nerdtree
" ----------------------------------------

let NERDTreeAutoDeleteBuffer = 1
let NERDTreeBookmarksFile = $VIMDIR.'/.NERDTreeBookmarks'
let NERDTreeCaseSensitiveSort = 1
let NERDTreeHijackNetrw = 0
let NERDTreeIgnore = ['^\.svn$', '^\.git$', '\.swp$', '\~$']
let NERDTreeMapCWD = 'cD'
let NERDTreeMapHelp = '<F1>'
let NERDTreeShowBookmarks = 1
let NERDTreeShowHidden = 1
let NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path._strForUI():''}"
let NERDTreeWinSize = 31

nnoremap <silent> <F1> :NERDTreeFind<CR>
nnoremap <silent> <F2> :NERDTreeToggle<CR>
nnoremap <silent> <Leader>tf :NERDTreeFind<CR>
nnoremap <silent> <Leader>tt :NERDTreeToggle<CR>


" syntastic
" ----------------------------------------

"set statusline+=%(\ %#ErrorMsg#%{SyntasticStatuslineFlag()}%*%)

let syntastic_aggregate_errors = 1
let syntastic_always_populate_loc_list = 1
let syntastic_auto_jump = 3
let syntastic_auto_loc_list = 0
let syntastic_check_on_open = 0
let syntastic_error_symbol = '>'
let syntastic_sort_aggregated_errors = 0
let syntastic_stl_format = ' %E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w} '
let syntastic_style_error_symbol = '>'
let syntastic_style_warning_symbol = '>'
let syntastic_warning_symbol = '>'

let syntastic_python_flake8_args = '--ignore=E501,E128'
let syntastic_sh_checkers = ['shellcheck']
let syntastic_sh_shellcheck_args = '--exclude=SC1007,SC1090,SC1091,SC2015,SC2032,SC2033,SC2088,SC2094,SC2139,SC2148'

nnoremap <silent> <Leader>SS :SyntasticCheck<CR>
nnoremap <silent> <Leader>Si :SyntasticInfo<CR>
nnoremap <silent> <Leader>Sr :SyntasticReset<CR>


" tagbar
" ----------------------------------------

let tagbar_autofocus = 1
let tagbar_iconchars = ['▸', '▾']
let tagbar_map_help = ['<F1>']
let tagbar_map_jump = ['<CR>', 'o']
let tagbar_map_togglefold = ['O', 'za']
let tagbar_sort = 0
let tagbar_width = 31

nnoremap <silent> <F8> :Tagbar<CR>
nnoremap <silent> <Leader>T :TagbarOpenAutoClose<CR>


" tcomment
" ----------------------------------------

let tcommentMaps = 0
let tcommentOptions = {'whitespace': 'no'}

nnoremap <silent> <Leader>C :TCommentBlock<CR>
nnoremap <silent> <Leader>cc :TComment<CR>
xnoremap <silent> <Leader>C :TCommentBlock<CR>
xnoremap <silent> <Leader>cc :TComment<CR>


" ultisnips
" ----------------------------------------

let UltiSnipsEditSplit = 'vertical'
let UltiSnipsExpandTrigger = '<C-J>'
let UltiSnipsJumpBackwardTrigger = '<C-Z>'
let UltiSnipsSnippetsDir = '~/.vim/UltiSnips'


" undotree
" ----------------------------------------

let undotree_SplitWidth = 31

nnoremap <silent> <F4> :silent UndotreeToggle<CR>


" ----------------------------------------

function! s:ColorsSet() abort

    hi link bufExplorerActBuf Directory
    hi link bufExplorerAltBuf Type
    hi link bufExplorerCurBuf Statement
    hi link bufExplorerHelp String
    hi link bufExplorerHidBuf Normal
    hi link bufExplorerInactBuf Normal
    hi link bufExplorerMapping Identifier
    hi link bufExplorerTitle PreProc

    hi TagbarHighlight cterm=reverse
    hi link TagbarHelp String

    hi EasyMotionTarget ctermfg=3 cterm=bold
    hi link EasyMotionIncCursor Cursor
    hi link EasyMotionIncSearch IncSearch
    hi link EasyMotionMoveHL IncSearch
    hi link EasyMotionShade Comment
    hi link EasyMotionTarget2First EasyMotionTarget
    hi link EasyMotionTarget2Second EasyMotionTarget

endfunction

call s:ColorsSet()

augroup vimrc_ext
    autocmd!

    autocmd ColorScheme * call <SID>ColorsSet()

    autocmd User FileBeagleReadPre
        \  unmap <buffer> <BS>
        \| nmap <buffer> <silent> u <Plug>(FileBeagleBufferFocusOnPrevious)

    autocmd FileType bufexplorer call utils#bufSpecial()
    autocmd FileType dirvish call utils#bufSpecial()
    autocmd FileType filebeagle call utils#bufSpecial()
    autocmd FileType nerdtree call utils#bufSpecial()
    autocmd FileType tagbar call utils#bufSpecial()
    autocmd FileType undotree call utils#bufSpecial()
augroup END
